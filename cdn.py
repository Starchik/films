import telebot
from flask import Flask, request
import requests

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
API_TOKEN = '6958777588:AAGD8N_z0Jc-jjO46SF8DPb7ROo-laa3LeI'
bot = telebot.TeleBot(API_TOKEN)

# –¢–æ–∫–µ–Ω API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
MOVIE_API_TOKEN = "7KRyeRqk77NXXRRQ99R0JDhpvzWesA4L"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
def search_movie_by_title(title, api_token):
    url = "https://portal.lumex.host/api/short"
    params = {
        "api_token": api_token,
        "title": title
    }

    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data.get("result"):
            movies = data.get("data", [])
            sorted_movies = sorted(
                movies,
                key=lambda x: get_relevance_score(title, x['title'], x.get('orig_title', '')),
                reverse=True
            )
            return sorted_movies
    return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
def get_relevance_score(query, title, orig_title):
    query = query.lower()
    title = title.lower()
    orig_title = orig_title.lower() if orig_title else ""

    if query == title:
        return float('inf')

    title_score = sum(1 for char in query if char in title)
    orig_title_score = sum(1 for char in query if char in orig_title) if orig_title else 0

    return title_score + orig_title_score


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL
def format_url(iframe_url):
    if iframe_url.startswith('/'):
        return f"https:{iframe_url}"
    elif not iframe_url.startswith(('http://', 'https://')):
        return None
    return iframe_url


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ.")


@bot.message_handler(func=lambda message: True)
def search_and_send_movies(message):
    title = message.text.strip()
    movies = search_movie_by_title(title, MOVIE_API_TOKEN)

    if movies:
        response_text = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n\n"
        for movie in movies:
            title = movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            orig_title = movie.get('orig_title', '–ë–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')
            imdb_id = movie.get('imdb_id', None)
            kp_id = movie.get('kp_id', None)
            content_type = movie.get('content_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            iframe_url = movie.get('iframe', '').split('src="')[1].split('"')[0] if 'iframe' in movie else ''
            formatted_url = format_url(iframe_url)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ IMDb –∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫
            imdb_link = f"https://www.imdb.com/title/{imdb_id}" if imdb_id else '–ù–µ—Ç IMDb —Å—Å—ã–ª–∫–∏'
            kp_link = f"https://www.kinopoisk.ru/film/{kp_id}/" if kp_id else '–ù–µ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏'

            response_text += f"üé• –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response_text += f"üìú –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {orig_title}\n"
            if imdb_id:
                response_text += f"üé¨ IMDB ID: [{imdb_id}]({imdb_link})\n"
            else:
                response_text += "üé¨ IMDB ID: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            response_text += f"üìÅ –¢–∏–ø: {content_type}\n"
            if kp_id:
                response_text += f"üé¨ KP ID: [{kp_id}]({kp_link})\n"
            else:
                response_text += "üé¨ KP ID: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            if formatted_url:
                response_text += f"üîó [–ü–µ—Ä–µ–π—Ç–∏]({formatted_url})\n\n"
            else:
                response_text += "üîó –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"

        bot.send_message(message.chat.id, response_text, parse_mode="Markdown", disable_web_page_preview=True)
    else:
        bot.reply_to(message, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


# –í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
def set_webhook():
    url = 'https://54.226.101.68/webhook'  # –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–∞—à–µ–≥–æ webhook
    bot.remove_webhook()
    bot.set_webhook(url=url)


# –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    set_webhook()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    app.run(host='0.0.0.0', port=5000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5000
